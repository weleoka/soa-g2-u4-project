version: '3.7'

services:

  nodemocks:
    #depends_on:
    #  - mariadb
    image: soa-g2/nodemocks
    build:
      context: ./soa-g2-mock-services
      dockerfile: Dockerfile
      #target: build # Stopping multistage Dockerfile at target, thus being able to use live reloads for example.
    container_name: nodemocks
    #restart: ${restart_policy}
    #volumes:
      # Volume to make sure the modules are saved to host.
      #- ./soa-g2-mock-services:/home/node/app
      # Named volume for saving the node dependencies to host
      #- nodemocks_node_modules:/home/node/app/node_modules
    ports:
      - "127.0.0.1:8282:8282" 

  # student-service-builder:
  #   ## Because this service(container) takes forever to finish student-service will try and 
  #   ## start before things are ready... this is a problem.
  #   ## https://crossprogramming.com/2018/05/13/controlling-service-startup-order-in-docker-compose.html
  #   image: gradle:6.7.0-jdk11
  #   # Because this container is creating files and directories we need to make sure 
  #   # that UID and GID are the same in container as on host. These variables have to be
  #   # exported to shell or supplied on cli: 'UID=${UID} GID=${GID} docker-compose up'
  #   user: "${UID}:${GID}"
  #   # equal to: gradle@sha256:33f85a6c2d3fd5f81987f66db3a3e379e562587e20b5ae404d8c4f7f62f37fb3
  #   #build:
  #   #  context: ./soa-g2-student-service
  #   #  dockerfile: Dockerfile_build
  #   volumes: 
  #     # Note: mount the whole project, .dockerignore does not work here!
  #     - ./soa-g2-student-service:/home/gradle
  #     - ./soa-g2-student-service/build/docker_build_cache:/home/gradle/.gradle/caches
  #   entrypoint: "gradle --quiet --no-daemon build"

  studserv:
    image: soa-g2/student-service
    container_name: studserv
    build:
      context: ./soa-g2-student-service
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:8083:8083"

  exserv:
    image: soa-g2/examination-service
    container_name: exserv
    build:
      context: ./soa-g2-examination-service
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:8080:8080"

  schedserv:
    image: soa-g2/schedule-service
    container_name: schedserv
    build:
      context: ./soa-g2-u4-schedule-service
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:8084:8084"

  courseserv:
    image: soa-g2/course-service
    container_name: courseserv
    build:
      context: ./soa-g2-u4-course-service
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:8082:8082"

  webui:
    # This could probably be on an isolated docker subnet...
    # however, due to CORS it may be best if this nginx server 
    # also acts as a reverse proxy for app-middleware.
    depends_on: 
      - appmw
    image: soa-g2/web-ui
    container_name: webui
    build:
      context: ./soa-g2-web-ui
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:9997:9997"
    environment:
      BASE_URL: "localhost:9997"

  appmw:
    image: soa-g2/app_middleware
    container_name: appmw
    build:
      context: ./soa-g2-app-middleware
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:8085:8085"


# == Volumes
#volumes:
#  nodemocks_node_modules:


# == Networks
networks:
  isole-net-1: # Need to isolate a service use this network.
    external:
      name: isole-net-1
  g2s-net-1: # Need to name this even if it is default in order to reference it.
    external: 
      name: g2s-net-1
  default: # If a service does not specify a network it will use this one
    external: 
      name: g2s-net-1
